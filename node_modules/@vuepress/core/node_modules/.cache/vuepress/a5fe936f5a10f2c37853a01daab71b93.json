{"remainingRequest":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/architecture/cosmos-sdk-interchain-account.md?vue&type=template&id=308e7664&","dependencies":[{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/architecture/cosmos-sdk-interchain-account.md","mtime":1609165239952},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}