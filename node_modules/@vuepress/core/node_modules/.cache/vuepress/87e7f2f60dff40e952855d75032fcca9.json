{"remainingRequest":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vuepress-theme-cosmos/layouts/GlobalLayout.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vuepress-theme-cosmos/layouts/GlobalLayout.vue","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/cosmos-sdk-interchain-account/cosmos-sdk-interchain-account/docs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}