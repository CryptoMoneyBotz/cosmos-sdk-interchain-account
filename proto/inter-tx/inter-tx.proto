syntax = "proto3";
package cosmos_sdk_interchain_account.x.inter_tx.v1;

option go_package = "github.com/chainapsis/cosmos-sdk-interchain-account/x/inter-tx/types";

import "gogoproto/gogo.proto";
import "cosmos/cosmos.proto";

message MsgRegister {
    // the port on which the packet will be sent
    string source_port = 1 [
        (gogoproto.moretags) = "yaml:\"source_port\""
    ];
    // the channel by which the packet will be sent
    string source_channel = 2 [
        (gogoproto.moretags) = "yaml:\"source_channel\""
    ];
    bytes sender = 3 [
        (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
    ];
}

message MsgSend {
    // the port on which the packet will be sent
    string source_port = 1 [
        (gogoproto.moretags) = "yaml:\"source_port\""
    ];
    // the channel by which the packet will be sent
    string source_channel = 2 [
        (gogoproto.moretags) = "yaml:\"source_channel\""
    ];
    string typ = 3;
    repeated cosmos.Coin amount = 4 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
    bytes sender = 5 [
        (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
    ];
    bytes to_address = 6 [
        (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
        (gogoproto.moretags) = "yaml:\"to_address\""
    ];
}

message RegistrationQueue {
    repeated bytes addresses = 1 [
        (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
    ];
}
